import time
import  os

# 字符点阵
dict = {

'a' : [[0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]],
'b' : [[1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0]],
'c' : [[0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0]],
'd' : [[1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0]],
'e' : [[1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0]],
'f' : [[1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]],
'g' : [[0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0],
     [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0]],
'h' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]],
'i' : [[0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0],
     [0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0]],
'j' : [[0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0],
     [1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0]],
'k' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0],
     [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0]],
'l' : [[1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0]],
'm' : [[1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]],
'n' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0],
     [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]],
'o' : [[0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0]],
'p' : [[1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0]],
'q' : [[0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0],
     [1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0]],
'r' : [[1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0],
     [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0]],
's' : [[0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0]],
't' : [[1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0],
     [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0]],
'u' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
     [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0]],
'v' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
     [0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0]],
'w': [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0],
     [1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0]],
'x' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0],
     [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]],
'y' : [[1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0],
     [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0]],
'z' : [[1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0]],
' ': [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]],
'.' : [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0]],
'?' : [[0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0]],
'_' : [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0]],
'!' : [[0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0],
     [0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0]]
}


# 调试用
screen_width = 10
text = 'across the great wall we can reach every corner in the world!'


# text = input('input text :')
# screen_width = int(input('input screen width(1-10)  :'))


# # speed = int(input('input moving speed (1-10)  :'))

str_list = [dict.get(alpha) for alpha in text]
empty_list = [dict.get(' ') for i in range(0,screen_width)]
str_list = empty_list + str_list + empty_list[0:screen_width // 3] #前后加适量空格,实现渐入渐出效果


def get_in_out_char(str_list,in_out_position):         # in_out_position 指针指向进入屏幕的字符index
     in_out_char = [str_list[in_out_position]]         # 根据指针截取进出屏幕的字符
     return in_out_char

def sliced_char_l_half(in_out_char, width):            # 字符切片获取左半部（进入屏幕）
     l_half_char =[[]]
     for height in range(0,7):
          tmp = in_out_char[0][height][:width]  # in_out_char  进来的是包含一个字符的列表， 所以索引第[0]个字符
          l_half_char[0].append(tmp)
     return l_half_char

def sliced_char_r_half(in_out_char, width):            # 字符切片获取右半部（走出屏幕）
     r_half_char =[[]]
     for height in range(0,7):
          tmp = in_out_char[0][height][width:]
          r_half_char[0].append(tmp)
     return r_half_char     

def before_in_char(str_list, start, in_out_position):  # 屏幕中间的完整字符
     before_char = str_list[start:in_out_position]
     return before_char

def screen_clear():                                    # 清除屏幕
     if os.name == 'nt':
          os.system('cls')
     elif os.name =='posix':
          os.system('clear')     

def prtstars(str_prt):                                 # 打印星星
     time.sleep(5 /100 )
     screen_clear()     
     print('\n\n\n')
     

     for height in range(len(str_prt[0])):   # 按行遍历
          for i in range(0,len(str_prt)):              #遍历 str_prt 列表中的item 
               for width in range(0,len(str_prt[i][height])):  #按列遍历
                    if str_prt[i][height][width]  == 1:
                         print("* ", end = "")
                    if str_prt[i][height][width] == 0:
                         print("  ", end = "")
          print()   # 每打印一行换行



def get_screen_list(str_list,screen_width):

     for in_out_position in range(screen_width, len(str_list) -1 + screen_width ): # 指针遍历字符串点阵
          for width in range(1,7): #每个字遍历循环切片6次
               head_tmp = get_in_out_char(str_list,in_out_position-screen_width)    # 左侧出画面的字符
               char_head = sliced_char_r_half(head_tmp, width)                      # 左侧出画面字符的 右半部
               char_body = before_in_char(str_list, in_out_position - screen_width + 1,in_out_position) # 中间字符

               if in_out_position < len(str_list):      #进入画面的字符数大于屏幕宽度,需要同时切片屏幕左侧和右侧字符
                    end_tmp = get_in_out_char(str_list,in_out_position)                  # 右侧进入画面的字符
                    char_end = sliced_char_l_half(end_tmp, width)                        # 右侧进入画面的字符的左半部
                    if width < 6:
                         str_prt= char_head + char_body + char_end
                    elif width == 6:
                         str_prt= char_body + char_end


               elif in_out_position >= len(str_list) :          #进入画面的字符数大于屏幕宽度,需要同时切片屏幕左侧和右侧字符
                    if width < 6:
                         str_prt= char_head + char_body 
                    elif width == 6:
                         str_prt= char_body 
               
               prtstars(str_prt)









while True:
     # 参数： 字符串 ， 屏幕宽度，
     get_screen_list(str_list,screen_width)  #

     


